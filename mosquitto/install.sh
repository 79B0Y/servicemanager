#!/data/data/com.termux/files/usr/bin/bash
# =============================================================================
# Mosquitto 安装脚本
# 版本: v1.0.1
# 功能: 安装 Mosquitto MQTT 服务器
# 修复: IPv4监听配置，MQTT上报时机控制
# =============================================================================

set -euo pipefail

# 加载统一路径定义
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common_paths.sh" || {
    echo "Error: Cannot load common paths"
    exit 1
}

# 设置脚本特定的日志文件
LOG_FILE="$LOG_FILE_INSTALL"

# 确保必要目录存在
ensure_directories

START_TIME=$(date +%s)

log "starting mosquitto installation process"

# 初始状态不上报MQTT（此时MQTT服务不可用）
echo "[$(date '+%F %T')] [INFO] Starting Mosquitto installation" >> "$LOG_FILE"

# -----------------------------------------------------------------------------
# 读取服务依赖配置
# -----------------------------------------------------------------------------
log "reading service dependencies from serviceupdate.json"

if [ ! -f "$SERVICEUPDATE_FILE" ]; then
    log "serviceupdate.json not found, using default dependencies"
    DEPENDENCIES='[]'
else
    DEPENDENCIES=$(jq -c ".services[] | select(.id==\"$SERVICE_ID\") | .install_dependencies // []" "$SERVICEUPDATE_FILE" 2>/dev/null || echo '[]')
fi

# 转换为 bash 数组
DEPS_ARRAY=($(echo "$DEPENDENCIES" | jq -r '.[]' 2>/dev/null || echo ""))

if [ ${#DEPS_ARRAY[@]} -gt 0 ]; then
    log "installing required dependencies: ${DEPS_ARRAY[*]}"
    
    # 安装依赖
    for dep in "${DEPS_ARRAY[@]}"; do
        if ! pkg install -y "$dep"; then
            log "failed to install dependency: $dep"
            record_install_history "FAILED" "unknown"
            exit 1
        fi
    done
fi

# -----------------------------------------------------------------------------
# 更新包管理器
# -----------------------------------------------------------------------------
log "updating package manager"

if ! pkg update; then
    log "failed to update package manager"
    record_install_history "FAILED" "unknown"
    exit 1
fi

# -----------------------------------------------------------------------------
# 安装 Mosquitto
# -----------------------------------------------------------------------------
log "installing mosquitto package"

if ! pkg install -y mosquitto; then
    log "failed to install mosquitto"
    record_install_history "FAILED" "unknown"
    exit 1
fi

# 获取安装的版本
VERSION_STR=$(get_current_version)
log "mosquitto version: $VERSION_STR"

# -----------------------------------------------------------------------------
# 创建配置目录
# -----------------------------------------------------------------------------
log "creating configuration directory"

mkdir -p "$MOSQUITTO_CONF_DIR"
mkdir -p "$MOSQUITTO_LOG_DIR"

# -----------------------------------------------------------------------------
# 生成优化的配置文件（确保IPv4监听）
# -----------------------------------------------------------------------------
log "generating optimized configuration file for IPv4 listening"

cat > "$MOSQUITTO_CONF_FILE" << EOF
# Mosquitto Configuration File
# Auto-generated by servicemanager
# Generated on: $(date)
# Compatible with Mosquitto 2.0+

# IPv4 Network Settings - Listen on all interfaces
listener 1883 0.0.0.0

# WebSocket Support
listener 9001 0.0.0.0
protocol websockets

# Authentication
allow_anonymous false
password_file $MOSQUITTO_PASSWD_FILE

# Persistence
persistence true
persistence_location $TERMUX_VAR_DIR/lib/mosquitto/

# Logging
log_dest file $MOSQUITTO_LOG_DIR/mosquitto.log
log_type error
log_type warning
log_type notice
log_type information
log_timestamp true

# Security and Performance
max_connections 100
max_inflight_messages 20
max_queued_messages 100

# Client settings
persistent_client_expiration 1m
max_packet_size 100000000

# Connection settings
keepalive_interval 60
retry_interval 20

# Memory optimization
message_size_limit 268435456
EOF

log "mosquitto.conf generated with IPv4 global listening (0.0.0.0:1883)"

# 验证配置文件语法
if ! mosquitto -c "$MOSQUITTO_CONF_FILE" -t 2>/dev/null; then
    log "configuration file validation failed"
    log "attempting to fix configuration..."
    
    # 生成最简配置
    cat > "$MOSQUITTO_CONF_FILE" << EOF
# Mosquitto Minimal Configuration
listener 1883 0.0.0.0
allow_anonymous false
password_file $MOSQUITTO_PASSWD_FILE
persistence true
persistence_location $TERMUX_VAR_DIR/lib/mosquitto/
log_dest file $MOSQUITTO_LOG_DIR/mosquitto.log
EOF

    if ! mosquitto -c "$MOSQUITTO_CONF_FILE" -t 2>/dev/null; then
        log "minimal configuration also failed, installation aborted"
        record_install_history "FAILED" "$VERSION_STR"
        exit 1
    fi
    log "using minimal configuration as fallback"
fi

# -----------------------------------------------------------------------------
# 创建用户密码文件
# -----------------------------------------------------------------------------
log "creating user password file"

# 获取 MQTT 配置
if ! load_mqtt_conf; then
    log "failed to load MQTT config, using defaults"
    MQTT_USER="admin"
    MQTT_PASS="admin"
fi

# 创建管理员用户
if echo "$MQTT_USER:$MQTT_PASS" | mosquitto_passwd -c "$MOSQUITTO_PASSWD_FILE" "$MQTT_USER"; then
    chmod 600 "$MOSQUITTO_PASSWD_FILE"
    log "password file created for user: $MQTT_USER"
else
    log "failed to create password file"
    record_install_history "FAILED" "$VERSION_STR"
    exit 1
fi

# -----------------------------------------------------------------------------
# 创建服务监控目录和运行脚本
# -----------------------------------------------------------------------------
log "creating service monitor directory"

mkdir -p "$SERVICE_CONTROL_DIR"

# 创建 run 脚本
cat > "$RUN_FILE" << EOF
#!/data/data/com.termux/files/usr/bin/sh
exec mosquitto -c $MOSQUITTO_CONF_FILE 2>&1
EOF

chmod +x "$RUN_FILE"

# 创建 down 文件禁用自启动
touch "$DOWN_FILE"
log "created down file to disable auto-start"

# -----------------------------------------------------------------------------
# 启动服务进行测试
# -----------------------------------------------------------------------------
log "starting service for testing"

# 手动启动测试（不通过脚本，避免MQTT上报）
if [ -e "$CONTROL_FILE" ]; then
    echo u > "$CONTROL_FILE"
    log "sent start signal to service monitor"
else
    log "control file not found, attempting direct start"
    # 直接启动测试
    if mosquitto -c "$MOSQUITTO_CONF_FILE" -d; then
        log "mosquitto started in daemon mode for testing"
        sleep 2
    else
        log "failed to start mosquitto directly"
        record_install_history "FAILED" "$VERSION_STR"
        exit 1
    fi
fi

# 移除down文件以便测试
if [ -f "$DOWN_FILE" ]; then
    rm -f "$DOWN_FILE"
fi

# -----------------------------------------------------------------------------
# 等待服务启动并验证IPv4监听
# -----------------------------------------------------------------------------
log "waiting for service ready and verifying IPv4 listening"

WAITED=0
MAX_WAIT_INSTALL=60
INTERVAL=3

while [ "$WAITED" -lt "$MAX_WAIT_INSTALL" ]; do
    # 检查进程
    if MOSQUITTO_PID=$(get_mosquitto_pid); then
        log "mosquitto process found (PID: $MOSQUITTO_PID)"
        
        # 验证IPv4端口监听
        if netstat -tulnp 2>/dev/null | grep -q "0.0.0.0:1883"; then
            log "SUCCESS: mosquitto listening on 0.0.0.0:1883 after ${WAITED}s"
            
            # 验证WebSocket端口
            if netstat -tulnp 2>/dev/null | grep -q "0.0.0.0:9001"; then
                log "SUCCESS: mosquitto WebSocket listening on 0.0.0.0:9001"
            else
                log "WARNING: WebSocket port 9001 not listening, but main port OK"
            fi
            
            # 服务启动成功，现在可以安全上报MQTT
            log "service verified, now safe to report MQTT status"
            
            # 停止测试实例（安装后不保持运行）
            if [ -n "$MOSQUITTO_PID" ]; then
                kill "$MOSQUITTO_PID" 2>/dev/null || true
                sleep 2
            fi
            
            # 创建down文件
            touch "$DOWN_FILE"
            log "installation testing completed, service stopped"
            
            break
        else
            log "waiting for IPv4 listening... (${WAITED}s)"
        fi
    else
        log "waiting for process start... (${WAITED}s)"
    fi
    
    sleep "$INTERVAL"
    WAITED=$((WAITED + INTERVAL))
done

if [ "$WAITED" -ge "$MAX_WAIT_INSTALL" ]; then
    log "timeout: service not properly listening after ${MAX_WAIT_INSTALL}s"
    
    # 获取详细的网络状态用于调试
    log "DEBUG: Current network listening status:"
    netstat -tulnp 2>/dev/null | grep -E "(1883|9001)" >> "$LOG_FILE" || echo "No mosquitto ports found" >> "$LOG_FILE"
    
    # 检查进程状态
    if MOSQUITTO_PID=$(get_mosquitto_pid); then
        log "mosquitto process exists but not listening properly"
        kill "$MOSQUITTO_PID" 2>/dev/null || true
    fi
    
    record_install_history "FAILED" "$VERSION_STR"
    exit 1
fi

# -----------------------------------------------------------------------------
# 记录安装历史和完成安装
# -----------------------------------------------------------------------------
log "recording installation history"

echo "$VERSION_STR" > "$VERSION_FILE"
record_install_history "SUCCESS" "$VERSION_STR"

# -----------------------------------------------------------------------------
# 安装完成，现在可以安全上报MQTT状态
# -----------------------------------------------------------------------------
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

log "mosquitto installation completed successfully in ${DURATION}s"

# 现在安装完成，尝试上报MQTT状态（如果MQTT服务可用）
# 使用后台进程避免阻塞
(
    sleep 5  # 等待系统稳定
    if command -v mosquitto_pub >/dev/null 2>&1; then
        # 尝试上报，但不阻塞安装流程
        mqtt_report "isg/install/$SERVICE_ID/status" \
            "{\"service\":\"$SERVICE_ID\",\"status\":\"installed\",\"version\":\"$VERSION_STR\",\"duration\":$DURATION,\"ipv4_listening\":true,\"timestamp\":$(date +%s)}" \
            1 2>/dev/null || true
    fi
) &

log "mosquitto installation completed with IPv4 global listening verified"
exit 0