#!/data/data/com.termux/files/usr/bin/bash
# =============================================================================
# Mosquitto 还原脚本
# 版本: v1.0.0
# 功能: 还原备份文件或生成默认配置
# =============================================================================

set -euo pipefail

# -----------------------------------------------------------------------------
# 路径和变量定义
# -----------------------------------------------------------------------------
SERVICE_ID="mosquitto"
BASE_DIR="/data/data/com.termux/files/home/servicemanager"
SERVICE_DIR="$BASE_DIR/$SERVICE_ID"
TERMUX_ETC_DIR="/data/data/com.termux/files/usr/etc"

CONFIG_FILE="$BASE_DIR/configuration.yaml"
MOSQUITTO_CONFIG_DIR="$TERMUX_ETC_DIR/mosquitto"
MOSQUITTO_CONFIG_FILE="$MOSQUITTO_CONFIG_DIR/mosquitto.conf"
MOSQUITTO_PASSWD_FILE="$MOSQUITTO_CONFIG_DIR/passwd"

LOG_DIR="$SERVICE_DIR/logs"
LOG_FILE="$LOG_DIR/restore.log"
BACKUP_DIR="/sdcard/isgbackup/$SERVICE_ID"

MOSQUITTO_PORT="1883"
DEFAULT_MQTT_USER="admin"
DEFAULT_MQTT_PASS="admin"

# 环境变量：用户可以指定要还原的备份文件
CUSTOM_BACKUP_FILE="${RESTORE_FILE:-}"

# -----------------------------------------------------------------------------
# 辅助函数
# -----------------------------------------------------------------------------
ensure_directories() {
    mkdir -p "$LOG_DIR"
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$MOSQUITTO_CONFIG_DIR"
    mkdir -p "/data/data/com.termux/files/usr/var/lib/mosquitto"
    mkdir -p "/data/data/com.termux/files/usr/var/log"
}

log() {
    echo "[$(date '+%F %T')] $*" | tee -a "$LOG_FILE"
}

load_mqtt_conf() {
    if [ -f "$CONFIG_FILE" ]; then
        MQTT_HOST=$(grep -Po '^[[:space:]]*host:[[:space:]]*\K.*' "$CONFIG_FILE" | head -n1 || echo "127.0.0.1")
        MQTT_PORT_CONFIG=$(grep -Po '^[[:space:]]*port:[[:space:]]*\K.*' "$CONFIG_FILE" | head -n1 || echo "1883")
        MQTT_USER=$(grep -Po '^[[:space:]]*username:[[:space:]]*\K.*' "$CONFIG_FILE" | head -n1 || echo "admin")
        MQTT_PASS=$(grep -Po '^[[:space:]]*password:[[:space:]]*\K.*' "$CONFIG_FILE" | head -n1 || echo "admin")
    else
        MQTT_HOST="127.0.0.1"
        MQTT_PORT_CONFIG="1883"
        MQTT_USER="admin"
        MQTT_PASS="admin"
    fi
}

get_mosquitto_pid() {
    local port_pid=$(netstat -tnlp 2>/dev/null | grep ":$MOSQUITTO_PORT " | awk '{print $7}' | cut -d'/' -f1 | head -n1)
    
    if [ -n "$port_pid" ] && [ "$port_pid" != "-" ]; then
        local process_name=$(ps -p "$port_pid" -o comm= 2>/dev/null)
        if [ "$process_name" = "mosquitto" ]; then
            echo "$port_pid"
            return 0
        fi
    fi
    return 1
}

mqtt_report() {
    local topic="$1"
    local payload="$2"
    
    # 检查 mosquitto 是否运行，如果没有运行则只记录日志不发送
    if ! get_mosquitto_pid > /dev/null 2>&1; then
        echo "[$(date '+%F %T')] [MQTT-OFFLINE] $topic -> $payload" >> "$LOG_FILE"
        return 0
    fi
    
    load_mqtt_conf
    mosquitto_pub -h "$MQTT_HOST" -p "$MQTT_PORT_CONFIG" -u "$MQTT_USER" -P "$MQTT_PASS" -t "$topic" -m "$payload" 2>/dev/null || true
    echo "[$(date '+%F %T')] [MQTT] $topic -> $payload" >> "$LOG_FILE"
}

# -----------------------------------------------------------------------------
# 生成默认配置文件
# -----------------------------------------------------------------------------
generate_default_config() {
    local user="${1:-$DEFAULT_MQTT_USER}"
    local pass="${2:-$DEFAULT_MQTT_PASS}"
    
    log "生成默认 mosquitto 配置"
    
    # 生成主配置文件
    cat > "$MOSQUITTO_CONFIG_FILE" << EOF
# Mosquitto MQTT Broker Configuration
# Generated by mosquitto restore script

# 网络设置 - 监听全局 IPv4 地址
bind_address 0.0.0.0
port $MOSQUITTO_PORT
max_connections -1

# 安全设置 - 禁用匿名访问，使用密码认证
allow_anonymous false
password_file $MOSQUITTO_PASSWD_FILE

# 日志设置
log_dest file /data/data/com.termux/files/usr/var/log/mosquitto.log
log_type error
log_type warning
log_type notice
log_type information
log_timestamp true

# 持久化设置
persistence true
persistence_location /data/data/com.termux/files/usr/var/lib/mosquitto/

# 客户端设置
max_keepalive 65535
EOF

    # 生成密码文件
    log "创建默认用户: $user"
    mosquitto_passwd -c -b "$MOSQUITTO_PASSWD_FILE" "$user" "$pass" 2>/dev/null || {
        log "创建密码文件失败"
        return 1
    }
    
    log "默认配置生成成功"
}

START_TIME=$(date +%s)

# -----------------------------------------------------------------------------
# 主还原流程
# -----------------------------------------------------------------------------
ensure_directories

# -----------------------------------------------------------------------------
# 确定还原文件
# -----------------------------------------------------------------------------
if [ -n "$CUSTOM_BACKUP_FILE" ]; then
    RESTORE_FILE="$CUSTOM_BACKUP_FILE"
    if [ -f "$RESTORE_FILE" ]; then
        log "使用用户指定文件: $RESTORE_FILE"
        METHOD="user_specified"
    else
        log "用户指定文件不存在: $RESTORE_FILE"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"user specified file not found\",\"file\":\"$RESTORE_FILE\",\"timestamp\":$(date +%s)}"
        exit 1
    fi
else
    RESTORE_FILE=$(ls -1t "$BACKUP_DIR"/mosquitto_backup_*.tar.gz 2>/dev/null | head -n1 || true)
    if [ -n "$RESTORE_FILE" ] && [ -f "$RESTORE_FILE" ]; then
        log "使用最新备份: $RESTORE_FILE"
        METHOD="latest_backup"
    else
        RESTORE_FILE=""
        METHOD="default_config"
    fi
fi

# -----------------------------------------------------------------------------
# 处理无备份文件的情况 - 生成默认配置
# -----------------------------------------------------------------------------
if [ -z "$RESTORE_FILE" ]; then
    log "未找到备份文件，将生成默认配置"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"default_config\",\"timestamp\":$(date +%s)}"
    
    # 停止服务（如果在运行）
    if get_mosquitto_pid > /dev/null 2>&1; then
        log "停止 mosquitto 服务"
        bash "$SERVICE_DIR/stop.sh" || true
        sleep 3
    fi
    
    # 生成默认配置
    load_mqtt_conf  # 从 servicemanager 配置中获取用户名密码
    generate_default_config "$MQTT_USER" "$MQTT_PASS"
    
    # 启动服务验证配置
    log "启动服务验证配置"
    bash "$SERVICE_DIR/start.sh"
    
    # 等待并验证服务状态
    MAX_WAIT=60
    INTERVAL=3
    WAITED=0
    log "等待 mosquitto 服务启动"
    
    while [ "$WAITED" -lt "$MAX_WAIT" ]; do
        if bash "$SERVICE_DIR/status.sh" --quiet; then
            log "服务使用新配置启动成功，耗时 ${WAITED}s"
            break
        fi
        sleep "$INTERVAL"
        WAITED=$((WAITED + INTERVAL))
    done
    
    # 最终状态验证和上报
    if bash "$SERVICE_DIR/status.sh" --quiet; then
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"service\":\"$SERVICE_ID\",\"status\":\"success\",\"method\":\"default_config\",\"user\":\"$MQTT_USER\",\"duration\":$DURATION,\"startup_time\":$WAITED,\"timestamp\":$END_TIME}"
        log "默认配置生成并启动成功，总耗时 ${DURATION}s（启动: ${WAITED}s）"
    else
        log "服务使用新配置启动失败，超时 ${MAX_WAIT}s"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"service failed to start after config generation\",\"method\":\"default_config\",\"timestamp\":$(date +%s)}"
        exit 1
    fi
    
    exit 0
fi

# -----------------------------------------------------------------------------
# 处理备份文件还原
# -----------------------------------------------------------------------------
log "开始从备份文件还原: $RESTORE_FILE"

# 检查文件格式
BASENAME=$(basename -- "$RESTORE_FILE")
EXT="${BASENAME##*.}"
EXT_LOWER=$(echo "$EXT" | tr '[:upper:]' '[:lower:]')
FINAL_RESTORE_FILE="$RESTORE_FILE"
CONVERTED_FROM_ZIP=false

# 如果是zip文件，需要转换为tar.gz格式
if [[ "$EXT_LOWER" == "zip" ]]; then
    log "检测到 zip 文件，转换为 tar.gz"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"$METHOD\",\"file\":\"$RESTORE_FILE\",\"converting_zip\":true}"
    
    TEMP_DIR="/data/data/com.termux/files/usr/tmp/mosquitto_restore_$"
    CONVERTED_FILE="$BACKUP_DIR/mosquitto_converted_$(date +%Y%m%d-%H%M%S).tar.gz"
    
    # 创建临时目录并解压
    rm -rf "$TEMP_DIR" && mkdir -p "$TEMP_DIR"
    if ! unzip -q "$RESTORE_FILE" -d "$TEMP_DIR"; then
        log "解压 zip 文件失败"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"failed to extract zip file\",\"timestamp\":$(date +%s)}"
        rm -rf "$TEMP_DIR"
        exit 1
    fi
    
    # 创建标准的tar.gz格式
    if tar -czf "$CONVERTED_FILE" -C "$TEMP_DIR" .; then
        FINAL_RESTORE_FILE="$CONVERTED_FILE"
        CONVERTED_FROM_ZIP=true
        log "zip 转换为: $(basename "$CONVERTED_FILE")"
    else
        log "从 zip 创建 tar.gz 失败"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"failed to create tar.gz from zip\",\"timestamp\":$(date +%s)}"
        rm -rf "$TEMP_DIR"
        exit 1
    fi
    
    # 清理临时目录
    rm -rf "$TEMP_DIR"
    
elif [[ "$BASENAME" != *.tar.gz ]]; then
    log "不支持的文件格式: $EXT"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"unsupported file format. only .tar.gz and .zip are supported\",\"file\":\"$BASENAME\",\"timestamp\":$(date +%s)}"
    exit 1
fi

# 上报开始还原
if [ "$CONVERTED_FROM_ZIP" = true ]; then
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"$METHOD\",\"file\":\"$RESTORE_FILE\",\"converting_zip\":true}"
else
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"$METHOD\",\"file\":\"$FINAL_RESTORE_FILE\"}"
fi

# -----------------------------------------------------------------------------
# 停止服务
# -----------------------------------------------------------------------------
if get_mosquitto_pid > /dev/null 2>&1; then
    log "停止 mosquitto 服务"
    bash "$SERVICE_DIR/stop.sh" || true
    sleep 3
fi

# -----------------------------------------------------------------------------
# 备份现有配置（防止还原失败）
# -----------------------------------------------------------------------------
BACKUP_EXISTING=false
if [ -d "$MOSQUITTO_CONFIG_DIR" ]; then
    EXISTING_BACKUP="/tmp/mosquitto_existing_config_$$"
    cp -r "$MOSQUITTO_CONFIG_DIR" "$EXISTING_BACKUP"
    BACKUP_EXISTING=true
    log "已备份现有配置到: $EXISTING_BACKUP"
fi

# -----------------------------------------------------------------------------
# 执行还原
# -----------------------------------------------------------------------------
TEMP_RESTORE_DIR="/tmp/mosquitto_restore_extract_$$"
rm -rf "$TEMP_RESTORE_DIR" && mkdir -p "$TEMP_RESTORE_DIR"

if tar -xzf "$FINAL_RESTORE_FILE" -C "$TEMP_RESTORE_DIR"; then
    log "备份文件解压成功"
    
    # 还原配置文件
    if [ -d "$TEMP_RESTORE_DIR/config" ]; then
        log "还原配置文件"
        rm -rf "$MOSQUITTO_CONFIG_DIR"
        cp -r "$TEMP_RESTORE_DIR/config" "$MOSQUITTO_CONFIG_DIR"
    else
        log "备份中未找到配置文件，保持现有配置或生成默认配置"
        if [ ! -f "$MOSQUITTO_CONFIG_FILE" ]; then
            generate_default_config
        fi
    fi
    
    # 还原数据文件
    if [ -d "$TEMP_RESTORE_DIR/data" ]; then
        log "还原数据文件"
        MOSQUITTO_DATA_DIR="/data/data/com.termux/files/usr/var/lib/mosquitto"
        rm -rf "$MOSQUITTO_DATA_DIR"
        cp -r "$TEMP_RESTORE_DIR/data" "$MOSQUITTO_DATA_DIR"
    fi
    
    # 清理临时目录
    rm -rf "$TEMP_RESTORE_DIR"
    
    log "还原完成，重启服务"
    bash "$SERVICE_DIR/start.sh"
    sleep 5
    
    if bash "$SERVICE_DIR/status.sh" --quiet; then
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        SIZE_KB=$(du -k "$FINAL_RESTORE_FILE" | awk '{print $1}')
        
        # 构建成功消息
        if [ "$CONVERTED_FROM_ZIP" = true ]; then
            mqtt_report "isg/restore/$SERVICE_ID/status" "{\"service\":\"$SERVICE_ID\",\"status\":\"success\",\"method\":\"$METHOD\",\"original_file\":\"$(basename "$RESTORE_FILE")\",\"restore_file\":\"$(basename "$FINAL_RESTORE_FILE")\",\"size_kb\":$SIZE_KB,\"duration\":$DURATION,\"converted_from_zip\":true,\"timestamp\":$END_TIME}"
            log "还原 + 重启完成: $(basename "$FINAL_RESTORE_FILE") ($SIZE_KB KB, ${DURATION}s)"
            log "转换自: $(basename "$RESTORE_FILE")"
        else
            mqtt_report "isg/restore/$SERVICE_ID/status" "{\"service\":\"$SERVICE_ID\",\"status\":\"success\",\"method\":\"$METHOD\",\"file\":\"$(basename "$FINAL_RESTORE_FILE")\",\"size_kb\":$SIZE_KB,\"duration\":$DURATION,\"timestamp\":$END_TIME}"
            log "还原 + 重启完成: $(basename "$FINAL_RESTORE_FILE") ($SIZE_KB KB, ${DURATION}s)"
        fi
        
        # 清理现有配置备份
        if [ "$BACKUP_EXISTING" = true ]; then
            rm -rf "$EXISTING_BACKUP"
        fi
    else
        log "还原成功但服务未启动"
        
        # 尝试恢复现有配置
        if [ "$BACKUP_EXISTING" = true ]; then
            log "尝试恢复现有配置"
            rm -rf "$MOSQUITTO_CONFIG_DIR"
            cp -r "$EXISTING_BACKUP" "$MOSQUITTO_CONFIG_DIR"
            rm -rf "$EXISTING_BACKUP"
        fi
        
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"service failed to start after restore\",\"method\":\"$METHOD\",\"timestamp\":$(date +%s)}"
        exit 1
    fi
else
    log "备份文件解压失败"
    rm -rf "$TEMP_RESTORE_DIR"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"backup file extraction failed\",\"timestamp\":$(date +%s)}"
    exit 1
fi

exit 0
