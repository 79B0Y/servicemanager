#!/data/data/com.termux/files/usr/bin/bash
# =============================================================================
# Mosquitto 还原脚本
# 版本: v1.0.0
# 功能: 还原备份文件或生成默认配置
# =============================================================================

set -euo pipefail

# 加载统一路径定义
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common_paths.sh" || {
    echo "Error: Cannot load common paths"
    exit 1
}

# 设置脚本特定的日志文件
LOG_FILE="$LOG_FILE_RESTORE"

# 确保必要目录存在
ensure_directories

START_TIME=$(date +%s)
CUSTOM_BACKUP_FILE="${RESTORE_FILE:-}"

# -----------------------------------------------------------------------------
# 生成默认配置文件
# -----------------------------------------------------------------------------
generate_default_config() {
    log "generating default configuration"
    
    # 确保配置目录存在
    mkdir -p "$MOSQUITTO_CONF_DIR"
    mkdir -p "$MOSQUITTO_LOG_DIR"
    
    # 获取 MQTT 配置
    load_mqtt_conf
    
    # 生成默认配置文件
    cat > "$MOSQUITTO_CONF_FILE" << EOF
# Mosquitto Configuration File
# Auto-generated by servicemanager restore script

# Network Settings
port 1883
bind_address 0.0.0.0

# WebSocket Support
listener 9001
protocol websockets

# Authentication
allow_anonymous false
password_file $MOSQUITTO_PASSWD_FILE

# Persistence
persistence true
persistence_location $TERMUX_VAR_DIR/lib/mosquitto/

# Logging
log_dest file $MOSQUITTO_LOG_DIR/mosquitto.log
log_type error
log_type warning
log_type notice
log_type information
log_timestamp true

# Security
max_connections 100
max_inflight_messages 20
max_queued_messages 100

# Client settings
clientid_prefixes
persistent_client_expiration 1m
EOF
    
    # 创建管理员用户
    echo "$MQTT_USER:$MQTT_PASS" | mosquitto_passwd -c "$MOSQUITTO_PASSWD_FILE" "$MQTT_USER"
    chmod 600 "$MOSQUITTO_PASSWD_FILE"
    
    log "default configuration generated successfully"
}

# -----------------------------------------------------------------------------
# 确定恢复文件
# -----------------------------------------------------------------------------
if [ -n "$CUSTOM_BACKUP_FILE" ]; then
    RESTORE_FILE="$CUSTOM_BACKUP_FILE"
    if [ -f "$RESTORE_FILE" ]; then
        log "using user specified file: $RESTORE_FILE"
        METHOD="user_specified"
    else
        log "user specified file not found: $RESTORE_FILE"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"user specified file not found\",\"file\":\"$RESTORE_FILE\",\"timestamp\":$(date +%s)}"
        exit 1
    fi
else
    RESTORE_FILE=$(ls -1t "$BACKUP_DIR"/mosquitto_backup_*.tar.gz 2>/dev/null | head -n1 || true)
    if [ -n "$RESTORE_FILE" ] && [ -f "$RESTORE_FILE" ]; then
        log "using latest backup: $RESTORE_FILE"
        METHOD="latest_backup"
    else
        RESTORE_FILE=""
        METHOD="default_config"
    fi
fi

# -----------------------------------------------------------------------------
# 处理无备份文件的情况 - 生成默认配置
# -----------------------------------------------------------------------------
if [ -z "$RESTORE_FILE" ]; then
    log "no backup file found, will generate default configuration"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"default_config\",\"timestamp\":$(date +%s)}"
    
    # 停止服务
    log "stopping mosquitto to release resources"
    bash "$SERVICE_DIR/stop.sh" || true
    sleep 5
    
    # 生成默认配置
    generate_default_config
    
    # 启动服务验证配置
    bash "$SERVICE_DIR/start.sh"
    
    # 等待并验证服务状态
    MAX_WAIT=120
    INTERVAL=5
    WAITED=0
    log "waiting for mosquitto to start with new configuration"
    
    while [ "$WAITED" -lt "$MAX_WAIT" ]; do
        if bash "$SERVICE_DIR/status.sh" --quiet; then
            log "service is running with new configuration after ${WAITED}s"
            break
        fi
        sleep "$INTERVAL"
        WAITED=$((WAITED + INTERVAL))
    done
    
    # 最终状态验证和上报
    if bash "$SERVICE_DIR/status.sh" --quiet; then
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"service\":\"$SERVICE_ID\",\"status\":\"success\",\"method\":\"default_config\",\"duration\":$DURATION,\"startup_time\":$WAITED,\"timestamp\":$END_TIME}"
        log "default configuration generated and service started successfully in ${DURATION}s (startup: ${WAITED}s)"
    else
        log "service failed to start with new configuration after ${MAX_WAIT}s"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"service failed to start after config generation\",\"method\":\"default_config\",\"timestamp\":$(date +%s)}"
        exit 1
    fi
    
    exit 0
fi

# -----------------------------------------------------------------------------
# 处理备份文件还原
# -----------------------------------------------------------------------------
log "starting restore from: $RESTORE_FILE"

# 检查文件格式
BASENAME=$(basename -- "$RESTORE_FILE")
EXT="${BASENAME##*.}"
EXT_LOWER=$(echo "$EXT" | tr '[:upper:]' '[:lower:]')
FINAL_RESTORE_FILE="$RESTORE_FILE"
CONVERTED_FROM_ZIP=false

# 如果是zip文件，需要转换为tar.gz格式
if [[ "$EXT_LOWER" == "zip" ]]; then
    log "detected zip file, converting to tar.gz"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"$METHOD\",\"file\":\"$RESTORE_FILE\",\"converting_zip\":true}"
    
    TEMP_DIR="$TERMUX_TMP_DIR/restore_temp_$$"
    CONVERTED_FILE="$BACKUP_DIR/mosquitto_converted_$(date +%Y%m%d-%H%M%S).tar.gz"
    
    # 创建临时目录并解压
    rm -rf "$TEMP_DIR" && mkdir -p "$TEMP_DIR"
    if ! unzip -q "$RESTORE_FILE" -d "$TEMP_DIR"; then
        log "failed to extract zip file"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"failed to extract zip file\",\"timestamp\":$(date +%s)}"
        rm -rf "$TEMP_DIR"
        exit 1
    fi
    
    # 查找解压后的数据目录
    DATA_DIR_IN_ZIP=""
    if [ -f "$TEMP_DIR/mosquitto.conf" ]; then
        # 如果直接是配置文件，认为是正确的结构
        DATA_DIR_IN_ZIP="."
    elif [ -d "$TEMP_DIR/backup_"* ]; then
        # 查找备份目录
        DATA_DIR_IN_ZIP=$(ls -d "$TEMP_DIR"/backup_* | head -n1 | sed "s|$TEMP_DIR/||")
    else
        # 查找包含mosquitto.conf的目录
        CONF_PATH=$(find "$TEMP_DIR" -name "mosquitto.conf" -type f | head -n1)
        if [ -n "$CONF_PATH" ]; then
            DATA_DIR_IN_ZIP=$(dirname "$CONF_PATH" | sed "s|$TEMP_DIR/||")
        fi
    fi
    
    if [ -z "$DATA_DIR_IN_ZIP" ]; then
        log "no valid mosquitto data found in zip file"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"invalid zip structure\",\"timestamp\":$(date +%s)}"
        rm -rf "$TEMP_DIR"
        exit 1
    fi
    
    # 创建标准的tar.gz格式
    if tar -czf "$CONVERTED_FILE" -C "$TEMP_DIR" "$DATA_DIR_IN_ZIP"; then
        FINAL_RESTORE_FILE="$CONVERTED_FILE"
        CONVERTED_FROM_ZIP=true
        log "converted zip to: $(basename "$CONVERTED_FILE")"
    else
        log "failed to create tar.gz from zip"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"failed to create tar.gz from zip\",\"timestamp\":$(date +%s)}"
        rm -rf "$TEMP_DIR"
        exit 1
    fi
    
    # 清理临时目录
    rm -rf "$TEMP_DIR"
    
elif [[ "$BASENAME" != *.tar.gz ]]; then
    log "unsupported file format: $EXT"
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"unsupported file format. only .tar.gz and .zip are supported\",\"file\":\"$BASENAME\",\"timestamp\":$(date +%s)}"
    exit 1
fi

# 上报开始还原
if [ "$CONVERTED_FROM_ZIP" = true ]; then
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"$METHOD\",\"file\":\"$RESTORE_FILE\",\"converting_zip\":true}"
else
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"restoring\",\"method\":\"$METHOD\",\"file\":\"$FINAL_RESTORE_FILE\"}"
fi

# -----------------------------------------------------------------------------
# 停止服务
# -----------------------------------------------------------------------------
log "stopping mosquitto before restore"
bash "$SERVICE_DIR/stop.sh" || true
sleep 5

# -----------------------------------------------------------------------------
# 执行恢复
# -----------------------------------------------------------------------------
TEMP_EXTRACT_DIR="$TERMUX_TMP_DIR/extract_$$"
mkdir -p "$TEMP_EXTRACT_DIR"

if tar -xzf "$FINAL_RESTORE_FILE" -C "$TEMP_EXTRACT_DIR"; then
    log "backup file extracted successfully"
    
    # 查找提取的目录
    EXTRACTED_DIR=$(ls -d "$TEMP_EXTRACT_DIR"/*/ 2>/dev/null | head -n1)
    if [ -z "$EXTRACTED_DIR" ]; then
        EXTRACTED_DIR="$TEMP_EXTRACT_DIR"
    fi
    
    # 恢复配置文件
    if [ -f "$EXTRACTED_DIR/mosquitto.conf" ]; then
        mkdir -p "$MOSQUITTO_CONF_DIR"
        cp "$EXTRACTED_DIR/mosquitto.conf" "$MOSQUITTO_CONF_FILE"
        log "restored configuration file"
    fi
    
    # 恢复密码文件
    if [ -f "$EXTRACTED_DIR/passwd" ]; then
        cp "$EXTRACTED_DIR/passwd" "$MOSQUITTO_PASSWD_FILE"
        chmod 600 "$MOSQUITTO_PASSWD_FILE"
        log "restored password file"
    fi
    
    # 恢复持久化数据
    if [ -d "$EXTRACTED_DIR/persistence" ]; then
        PERSISTENCE_DIR="$TERMUX_VAR_DIR/lib/mosquitto"
        mkdir -p "$PERSISTENCE_DIR"
        cp -r "$EXTRACTED_DIR/persistence"/* "$PERSISTENCE_DIR/" 2>/dev/null || true
        log "restored persistence data"
    fi
    
    # 清理临时目录
    rm -rf "$TEMP_EXTRACT_DIR"
    
    log "restore completed, restarting service"
    bash "$SERVICE_DIR/start.sh"
    sleep 30
    
    if bash "$SERVICE_DIR/status.sh" --quiet; then
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        SIZE_KB=$(du -k "$FINAL_RESTORE_FILE" | awk '{print $1}')
        
        # 构建成功消息
        if [ "$CONVERTED_FROM_ZIP" = true ]; then
            mqtt_report "isg/restore/$SERVICE_ID/status" "{\"service\":\"$SERVICE_ID\",\"status\":\"success\",\"method\":\"$METHOD\",\"original_file\":\"$(basename "$RESTORE_FILE")\",\"restore_file\":\"$(basename "$FINAL_RESTORE_FILE")\",\"size_kb\":$SIZE_KB,\"duration\":$DURATION,\"converted_from_zip\":true,\"timestamp\":$END_TIME}"
            log "restore + restart complete: $(basename "$FINAL_RESTORE_FILE") ($SIZE_KB KB, ${DURATION}s)"
            log "converted from: $(basename "$RESTORE_FILE")"
        else
            mqtt_report "isg/restore/$SERVICE_ID/status" "{\"service\":\"$SERVICE_ID\",\"status\":\"success\",\"method\":\"$METHOD\",\"file\":\"$(basename "$FINAL_RESTORE_FILE")\",\"size_kb\":$SIZE_KB,\"duration\":$DURATION,\"timestamp\":$END_TIME}"
            log "restore + restart complete: $(basename "$FINAL_RESTORE_FILE") ($SIZE_KB KB, ${DURATION}s)"
        fi
    else
        log "restore succeeded but service did not start"
        mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"service failed to start after restore\",\"method\":\"$METHOD\",\"timestamp\":$(date +%s)}"
        exit 1
    fi
else
    mqtt_report "isg/restore/$SERVICE_ID/status" "{\"status\":\"failed\",\"message\":\"restore failed - could not extract backup\",\"timestamp\":$(date +%s)}"
    log "restore failed - could not extract backup"
    rm -rf "$TEMP_EXTRACT_DIR"
    exit 1
fi

exit 0